#include <iostream>
#include "convert.hpp"
#include "xor.hpp"

int main(int argc, char const *argv[]) {
    uint8_t bytes[] = { 
        0x49, 0x27, 0x6d, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 
        0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x72, 0x61, 0x69, 
        0x6e, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x69, 
        0x73, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x68, 0x72,
        0x6f, 0x6f, 0x6d };
    std::cout << Utility::ToBase64(bytes, sizeof(bytes)) << std::endl;

    uint8_t xor1[] = {
        0x1c, 0x01, 0x11, 0x00, 0x1f, 0x01, 0x01, 0x00, 0x06, 0x1a, 0x02, 0x4b,
        0x53, 0x53, 0x50, 0x09, 0x18, 0x1c
    };
    uint8_t xor2[] = {
        0x68, 0x69, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x6c, 0x6c,
        0x27, 0x73, 0x20, 0x65, 0x79, 0x65
    };
    auto xor_vector = Utility::FixedXor(xor1, sizeof(xor1), xor2, sizeof(xor2));
    std::cout << Utility::ToHex(xor_vector.data(), xor_vector.size()) << std::endl;
    
    return 0;
}
